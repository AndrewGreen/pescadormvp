{"name":"Pescadormvp","tagline":"Pescador MVP is a modular MVP framework for GWT that builds on standard MVP-related classes provided by GWT. Its main features include the association of places, activities, views and components using generics, and GIN-based dependency injection.","body":"## Pescador MVP\r\n\r\nPescador MVP is an MVP framework for GWT that builds on the standard MVP-related\r\nclasses provided by GWT.\r\n\r\nIt integrates several Java and GWT best practices. Features include: \r\n\r\n- A modular global application architecture.\r\n- Dependency injection (using GIN/Guice).\r\n- Command pattern for server calls (using gwt-dispatch) and caching of responses,\r\n  including for JSONP calls.\r\n- Testing and building with a single command (via Maven).\r\n- While maintaining compatibility with standard GWT classes for MVP, it provides:\r\n    - A generics-based mechanism for associating places, activities\r\n    and views.\r\n    - Facilities for storing key-value data in places.\r\n    - The ability to associate activities and views with other kinds of state\r\n    indicators besides places. \r\n\r\nInstructions on how to use Pescador MVP are in the Javadoc itself.\r\n\r\nYou may also wish to walk through the example application, the source code for which is in the examples/jsonp folder. Here is how the example app looks compiled and running in your browser.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}